module booleanTester (
    input clk,  // clock
    input rst,  // reset
    input start,
    output status[2] 
    
  ) {
  
  dff counter[4](.clk(clk), .rst(rst));
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    .rst(rst) {
      fsm state = {IDLE, CASE, CORRECT, WRONG};  
    }    
  }
  boolean boo;
    
  always {  
    status = 0;
    boo.a = 0;
    boo.b = 0;
    boo.alufn = 6d0;
    
    if(start == 0){ 
      state.d = state.IDLE;
    }
    // Status 0 - Start
    // Status 1 - Correct
    // Status 2 - Wrong
    
    case(state.q) {
      state.IDLE:
        status = 0;
        if(start == 1) {
          state.d = state.CASE;
        }
      state.CASE:
        case(counter.q) {
        
        // Test for 42 and 24
          
          1:boo.alufn = 6b011000; //AND
            boo.a = 16b0000000000101010; //42
            boo.b = 16b0000000000011000; //24
            
            if (boo.out != 16b0000000000001000) {
              state.d = state.WRONG;
            }
            
          2:boo.alufn = 6b011110; //OR
            boo.a = 16b0000000000101010; //42
            boo.b = 16b0000000000011000; //24
            
            if (boo.out != 16b0000000000111010) {
              state.d = state.WRONG;
            }
            
          3:boo.alufn = 6b010110; //XOR
            boo.a = 16b0000000000101010; //42
            boo.b = 16b0000000000011000; //24
            
            if (boo.out != 16b0000000000110010) {            
              state.d = state.WRONG;
            }
            
          4:boo.alufn = 6b011010; //"A"
            boo.a = 16b0000000000101010; //42
            
            if (boo.out != 16b0000000000101010) {
              state.d = state.WRONG;
            } 
            
        // Test for 0 and 0
          
          5:boo.alufn = 6b011000; //AND
            boo.a = 16b0000000000000000; //0
            boo.b = 16b0000000000000000; //0
            
            if (boo.out != 16b0000000000000000) {
              state.d = state.WRONG;
            }
               
          7:boo.alufn = 6b011110; //OR
            boo.a = 16b0000000000000000; //0
            boo.b = 16b0000000000000000; //0
            
            if (boo.out != 16b0000000000000000) {
              state.d = state.WRONG;
            }
            
          8:boo.alufn = 6b010110; //XOR
            boo.a = 16b0000000000000000; //0
            boo.b = 16b0000000000000000; //0
            
            if (boo.out != 16b0000000000000000) {
              state.d = state.WRONG;
            }
            
          9:boo.alufn = 6b011010; //"A"
            boo.a = 16b0000000000000000; //0
            
            if (boo.out != 16b0000000000000000) {
              state.d = state.WRONG;
            }
            
        // Test for 16hFFFF and 16hFFFF    
            
          10:boo.alufn = 6b011000; //AND
            boo.a = 16b1111111111111111; //16hFFFF
            boo.b = 16b1111111111111111; //16hFFFF
            
            if (boo.out != 16b1111111111111111) {
              state.d = state.WRONG;
            }
            
         11:boo.alufn = 6b011110; //OR
            boo.a = 16b1111111111111111; //16hFFFF
            boo.b = 16b1111111111111111; //16hFFFF
            
            if (boo.out != 16b1111111111111111) {
              state.d = state.WRONG;
            }
           
         12:boo.alufn = 6b010110; //XOR
            boo.a = 16b1111111111111111; //16hFFFF
            boo.b = 16b1111111111111111; //16hFFFF
            
            if (boo.out != 16b0000000000000000) {
              state.d = state.WRONG;
            }
            
         13:boo.alufn = 6b011010; //"A"
            boo.a = 16b1111111111111111; //16hFFFF
            
            if (boo.out != 16b1111111111111111) {
              state.d = state.WRONG;
            }
            
         14:state.d = state.CORRECT;            
        }
        
      state.CORRECT:
        status = 1;
        
      state.WRONG:
        status = 2;
    }
    
    counter.d = counter.q + 1;
  }
}